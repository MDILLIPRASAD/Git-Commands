Git Commands:
------------------------
git pull origin dev/main         --> get pulled latest code and merge to your environment from remote to local
git checkout -b <branchname>/git branch <branchname>     --> create branch for doing changes/your task
git add <features/filename with extension>               --> add whatever features you did in files
git commit -m '<message whatchanges you did>'            --> commit features in local(like save/deploy)
git push origin <branchname>     --> to push local branch to remote, we don't directly push changes to main, we push changes to our branch
git push origin main/dev         --> to push to main origin(production ready)
pull request/new pull request(PR)--> create pull request, they show changes, again press create pull request, we can add reviewers if any is there, new pull request(PR) raised
reviewing pull request           --> click on 'Pull requests', review changes, files changed, you can write comments if you want, click start review(pending), 
merging pull request(MR)         --> click on 'Pull requests', select which one to merge, 'Merge pull request', 'Confirm merge'. 
After merge we delete that branch--> click on 'Delete branch', branch is deleted in the git, but not in the local.
Delete branch in the local       --> first check "git branch", you can't delete branch which you are currently staying, change branch to main-"git checkout main", after that "git pull origin main"- b/c the changes not pulled to local, after pulled delete the branch"git branch -d {branchname}".
git branch -d <branchname>       --> it delete branch which we are created after merged into main repo.
git branch -D <branch-name>      --> force delete a branch, even if changes are not commited or merged we can delete a branch

git checkout main  # Switch to the main branch
git merge task1    # Merge the changes from task1 into main
git branch -d task1  # Now you can safely delete the task1 branch

git branch                       --> to list local branches
git branch -r                    --> to list remote branches
git branch -a                    --> to list local and remote branches

git fetch origin main            --> this command will fetch the details from remote without merging the code
git merge                        --> it will merge the code which you fetch
git checkout <branchname>        --> change branch to main/div/your feature branch
git status                       --> show the status of the tree/project/dir
git diff                         --> show the diiferences you made in the dir/project/file
git branch                       --> it will show the branch name in which branch you currently in.
git commit -a -m '<message>'     --> it will do simultaneously i.e, add and commit 
git stash save -m '<message>'    --> place our task in temporary stash, we can work on another task and commit
git stash pop                    --> this will get changes and out from stash, then you can work on it

(Q) diff b/n git fetch and git pull, when either is used?
fetch is rarely used in real cases

Git branches
----------------------------------------------------
Git by default comes with 'main' branch
No one should directly push changes to 'main'
Github offers branch protection rule to restirct team members to directly push to main
Create seperate branch for every new task(Don't include multiple tasks in one branch)-('stash' it if happens)

Creating branch & pushing to created branch
-----------------------------------------------------
Before creating branch pull the latest code from git 
create branch - git branch {branchname}
change branch to newly created - git checkout {branchname}
makes changes whatever you want to your code
then - git add {filename}
then - git commit -m '{message}'
then - git push origin {yourbranchname}     //don't push to main 
code pushed from local to remote/central repository

Git commands in real-world projects:
-----------------------------------------------------

1. **git clone:**
   **Explanation:** Clones a remote repository to create a local copy on your machine.
   **Example:** Cloning a repository to your local machine:
   ```bash
   git clone https://github.com/username/repository.git
   ```

2. **git pull:**
   **Explanation:** Fetches and merges changes from a remote repository into your local branch.
   **Example:** Pulling changes from the remote 'main' branch into your local 'main' branch:
   ```bash
   git pull origin main
   ```

3. **git add:**
   **Explanation:** Stages changes for commit. Adds changes to the staging area.
   **Example:** Staging specific files:
   ```bash
   git add file1.js file2.css
   ```

4. **git commit:**
   **Explanation:** Records staged changes and creates a new commit with a message.
   **Example:** Committing staged changes with a descriptive message:
   ```bash
   git commit -m "Add new feature"
   ```

5. **git push:**
   **Explanation:** Pushes your local commits to a remote repository.
   **Example:** Pushing your local 'main' branch to the remote 'main' branch:
   ```bash
   git push origin main
   ```

6. **git branch:**
   **Explanation:** Lists, creates, or switches branches.
   **Example:** Creating a new branch:
   ```bash
   git branch feature-branch
   ```

7. **git checkout:**
   **Explanation:** Switches to a different branch or commit.
   **Example:** Switching to an existing branch:
   ```bash
   git checkout feature-branch
   ```

8. **git merge:**
   **Explanation:** Integrates changes from one branch into another.
   **Example:** Merging 'feature-branch' into 'main' branch:
   ```bash
   git checkout main
   git merge feature-branch
   ```

9. **git status:**
   **Explanation:** Displays the status of your working directory and staged changes.
   **Example:** Checking the status of your repository:
   ```bash
   git status
   ```

10. **git log:**
    **Explanation:** Displays a history of commits.
    **Example:** Viewing commit history:
    ```bash
    git log
    ```

11. **git remote:**
    **Explanation:** Lists, adds, or manages remote repositories.
    **Example:** Listing remote repositories:
    ```bash
    git remote -v
    ```

12. **git fetch:**
    **Explanation:** Fetches changes from a remote repository without merging.
    **Example:** Fetching changes from the remote repository:
    ```bash
    git fetch origin
    ```

13. **git reset:**
    **Explanation:** Resets the state of the repository to a previous commit.
    **Example:** Resetting to a previous commit:
    ```bash
    git reset --hard <commit_hash>
    ```

14. **git stash:**
    **Explanation:** Temporarily saves changes in a "stash" to work on something else.
    **Example:** Stashing changes before switching branches:
    ```bash
    git stash
    ```

15. **git cherry-pick:**
    **Explanation:** Applies specific commits from one branch to another.
    **Example:** Applying a commit from 'feature-branch' to 'main':
    ```bash
    git cherry-pick <commit_hash>
    ```
    ----------------------------------------------------------------------------------------